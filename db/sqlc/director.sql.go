// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: director.sql

package db

import (
	"context"
)

const createDirector = `-- name: CreateDirector :one
INSERT INTO directors (
    firstname, lastname
) VALUES (
    $1, $2
) RETURNING id, firstname, lastname
`

type CreateDirectorParams struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

func (q *Queries) CreateDirector(ctx context.Context, arg CreateDirectorParams) (Director, error) {
	row := q.queryRow(ctx, q.createDirectorStmt, createDirector, arg.Firstname, arg.Lastname)
	var i Director
	err := row.Scan(&i.ID, &i.Firstname, &i.Lastname)
	return i, err
}

const getDirector = `-- name: GetDirector :one
SELECT id, firstname, lastname FROM directors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDirector(ctx context.Context, id int32) (Director, error) {
	row := q.queryRow(ctx, q.getDirectorStmt, getDirector, id)
	var i Director
	err := row.Scan(&i.ID, &i.Firstname, &i.Lastname)
	return i, err
}

const listDirectors = `-- name: ListDirectors :many
SELECT id, firstname, lastname FROM directors
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListDirectorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDirectors(ctx context.Context, arg ListDirectorsParams) ([]Director, error) {
	rows, err := q.query(ctx, q.listDirectorsStmt, listDirectors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Director
	for rows.Next() {
		var i Director
		if err := rows.Scan(&i.ID, &i.Firstname, &i.Lastname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDirector = `-- name: UpdateDirector :exec
UPDATE directors SET firstname = $2, lastname = $3 WHERE id = $1
`

type UpdateDirectorParams struct {
	ID        int32  `json:"id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
}

func (q *Queries) UpdateDirector(ctx context.Context, arg UpdateDirectorParams) error {
	_, err := q.exec(ctx, q.updateDirectorStmt, updateDirector, arg.ID, arg.Firstname, arg.Lastname)
	return err
}
