// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: country.sql

package db

import (
	"context"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (
    code, country_name, continent_name
) VALUES (
    $1, $2, $3
) RETURNING code, country_name, continent_name
`

type CreateCountryParams struct {
	Code          int32  `json:"code"`
	CountryName   string `json:"countryName"`
	ContinentName string `json:"continentName"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.queryRow(ctx, q.createCountryStmt, createCountry, arg.Code, arg.CountryName, arg.ContinentName)
	var i Country
	err := row.Scan(&i.Code, &i.CountryName, &i.ContinentName)
	return i, err
}

const getCountry = `-- name: GetCountry :one
SELECT code, country_name, continent_name FROM countries
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetCountry(ctx context.Context, code int32) (Country, error) {
	row := q.queryRow(ctx, q.getCountryStmt, getCountry, code)
	var i Country
	err := row.Scan(&i.Code, &i.CountryName, &i.ContinentName)
	return i, err
}

const listCountries = `-- name: ListCountries :many
SELECT code, country_name, continent_name FROM countries
ORDER BY country_name
LIMIT $1
OFFSET $2
`

type ListCountriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCountries(ctx context.Context, arg ListCountriesParams) ([]Country, error) {
	rows, err := q.query(ctx, q.listCountriesStmt, listCountries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(&i.Code, &i.CountryName, &i.ContinentName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCountry = `-- name: UpdateCountry :exec
UPDATE countries SET country_name = $2, continent_name = $3 WHERE code = $1
`

type UpdateCountryParams struct {
	Code          int32  `json:"code"`
	CountryName   string `json:"countryName"`
	ContinentName string `json:"continentName"`
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) error {
	_, err := q.exec(ctx, q.updateCountryStmt, updateCountry, arg.Code, arg.CountryName, arg.ContinentName)
	return err
}
