// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCountryStmt, err = db.PrepareContext(ctx, createCountry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCountry: %w", err)
	}
	if q.createDirectorStmt, err = db.PrepareContext(ctx, createDirector); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDirector: %w", err)
	}
	if q.createMovieStmt, err = db.PrepareContext(ctx, createMovie); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMovie: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getCountryStmt, err = db.PrepareContext(ctx, getCountry); err != nil {
		return nil, fmt.Errorf("error preparing query GetCountry: %w", err)
	}
	if q.getDirectorStmt, err = db.PrepareContext(ctx, getDirector); err != nil {
		return nil, fmt.Errorf("error preparing query GetDirector: %w", err)
	}
	if q.getMovieByIdStmt, err = db.PrepareContext(ctx, getMovieById); err != nil {
		return nil, fmt.Errorf("error preparing query GetMovieById: %w", err)
	}
	if q.getMovieByTitleStmt, err = db.PrepareContext(ctx, getMovieByTitle); err != nil {
		return nil, fmt.Errorf("error preparing query GetMovieByTitle: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listCountriesStmt, err = db.PrepareContext(ctx, listCountries); err != nil {
		return nil, fmt.Errorf("error preparing query ListCountries: %w", err)
	}
	if q.listDirectorsStmt, err = db.PrepareContext(ctx, listDirectors); err != nil {
		return nil, fmt.Errorf("error preparing query ListDirectors: %w", err)
	}
	if q.listMoviesByIdStmt, err = db.PrepareContext(ctx, listMoviesById); err != nil {
		return nil, fmt.Errorf("error preparing query ListMoviesById: %w", err)
	}
	if q.listMoviesByTitleStmt, err = db.PrepareContext(ctx, listMoviesByTitle); err != nil {
		return nil, fmt.Errorf("error preparing query ListMoviesByTitle: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateCountryStmt, err = db.PrepareContext(ctx, updateCountry); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCountry: %w", err)
	}
	if q.updateDirectorStmt, err = db.PrepareContext(ctx, updateDirector); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDirector: %w", err)
	}
	if q.updateMovieStmt, err = db.PrepareContext(ctx, updateMovie); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMovie: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCountryStmt != nil {
		if cerr := q.createCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCountryStmt: %w", cerr)
		}
	}
	if q.createDirectorStmt != nil {
		if cerr := q.createDirectorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDirectorStmt: %w", cerr)
		}
	}
	if q.createMovieStmt != nil {
		if cerr := q.createMovieStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMovieStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getCountryStmt != nil {
		if cerr := q.getCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCountryStmt: %w", cerr)
		}
	}
	if q.getDirectorStmt != nil {
		if cerr := q.getDirectorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDirectorStmt: %w", cerr)
		}
	}
	if q.getMovieByIdStmt != nil {
		if cerr := q.getMovieByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMovieByIdStmt: %w", cerr)
		}
	}
	if q.getMovieByTitleStmt != nil {
		if cerr := q.getMovieByTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMovieByTitleStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listCountriesStmt != nil {
		if cerr := q.listCountriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCountriesStmt: %w", cerr)
		}
	}
	if q.listDirectorsStmt != nil {
		if cerr := q.listDirectorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDirectorsStmt: %w", cerr)
		}
	}
	if q.listMoviesByIdStmt != nil {
		if cerr := q.listMoviesByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMoviesByIdStmt: %w", cerr)
		}
	}
	if q.listMoviesByTitleStmt != nil {
		if cerr := q.listMoviesByTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMoviesByTitleStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateCountryStmt != nil {
		if cerr := q.updateCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCountryStmt: %w", cerr)
		}
	}
	if q.updateDirectorStmt != nil {
		if cerr := q.updateDirectorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDirectorStmt: %w", cerr)
		}
	}
	if q.updateMovieStmt != nil {
		if cerr := q.updateMovieStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMovieStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createCountryStmt     *sql.Stmt
	createDirectorStmt    *sql.Stmt
	createMovieStmt       *sql.Stmt
	createUserStmt        *sql.Stmt
	getCountryStmt        *sql.Stmt
	getDirectorStmt       *sql.Stmt
	getMovieByIdStmt      *sql.Stmt
	getMovieByTitleStmt   *sql.Stmt
	getUserStmt           *sql.Stmt
	listCountriesStmt     *sql.Stmt
	listDirectorsStmt     *sql.Stmt
	listMoviesByIdStmt    *sql.Stmt
	listMoviesByTitleStmt *sql.Stmt
	listUsersStmt         *sql.Stmt
	updateCountryStmt     *sql.Stmt
	updateDirectorStmt    *sql.Stmt
	updateMovieStmt       *sql.Stmt
	updateUserStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createCountryStmt:     q.createCountryStmt,
		createDirectorStmt:    q.createDirectorStmt,
		createMovieStmt:       q.createMovieStmt,
		createUserStmt:        q.createUserStmt,
		getCountryStmt:        q.getCountryStmt,
		getDirectorStmt:       q.getDirectorStmt,
		getMovieByIdStmt:      q.getMovieByIdStmt,
		getMovieByTitleStmt:   q.getMovieByTitleStmt,
		getUserStmt:           q.getUserStmt,
		listCountriesStmt:     q.listCountriesStmt,
		listDirectorsStmt:     q.listDirectorsStmt,
		listMoviesByIdStmt:    q.listMoviesByIdStmt,
		listMoviesByTitleStmt: q.listMoviesByTitleStmt,
		listUsersStmt:         q.listUsersStmt,
		updateCountryStmt:     q.updateCountryStmt,
		updateDirectorStmt:    q.updateDirectorStmt,
		updateMovieStmt:       q.updateMovieStmt,
		updateUserStmt:        q.updateUserStmt,
	}
}
