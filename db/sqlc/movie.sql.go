// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: movie.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
    title, director_id, admin_id, release_year, production_country_code
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, title, director_id, admin_id, release_year, production_country_code, created_at
`

type CreateMovieParams struct {
	Title                 string        `json:"title"`
	DirectorID            sql.NullInt32 `json:"directorID"`
	AdminID               sql.NullInt32 `json:"adminID"`
	ReleaseYear           time.Time     `json:"releaseYear"`
	ProductionCountryCode int32         `json:"productionCountryCode"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.queryRow(ctx, q.createMovieStmt, createMovie,
		arg.Title,
		arg.DirectorID,
		arg.AdminID,
		arg.ReleaseYear,
		arg.ProductionCountryCode,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DirectorID,
		&i.AdminID,
		&i.ReleaseYear,
		&i.ProductionCountryCode,
		&i.CreatedAt,
	)
	return i, err
}

const getMovieById = `-- name: GetMovieById :one
SELECT id, title, director_id, admin_id, release_year, production_country_code, created_at FROM movies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMovieById(ctx context.Context, id int32) (Movie, error) {
	row := q.queryRow(ctx, q.getMovieByIdStmt, getMovieById, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DirectorID,
		&i.AdminID,
		&i.ReleaseYear,
		&i.ProductionCountryCode,
		&i.CreatedAt,
	)
	return i, err
}

const getMovieByTitle = `-- name: GetMovieByTitle :one
SELECT id, title, director_id, admin_id, release_year, production_country_code, created_at FROM movies
WHERE title = $1 LIMIT 1
`

func (q *Queries) GetMovieByTitle(ctx context.Context, title string) (Movie, error) {
	row := q.queryRow(ctx, q.getMovieByTitleStmt, getMovieByTitle, title)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DirectorID,
		&i.AdminID,
		&i.ReleaseYear,
		&i.ProductionCountryCode,
		&i.CreatedAt,
	)
	return i, err
}

const listMoviesById = `-- name: ListMoviesById :many
SELECT id, title, director_id, admin_id, release_year, production_country_code, created_at FROM movies
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListMoviesByIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMoviesById(ctx context.Context, arg ListMoviesByIdParams) ([]Movie, error) {
	rows, err := q.query(ctx, q.listMoviesByIdStmt, listMoviesById, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DirectorID,
			&i.AdminID,
			&i.ReleaseYear,
			&i.ProductionCountryCode,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMoviesByTitle = `-- name: ListMoviesByTitle :many
SELECT id, title, director_id, admin_id, release_year, production_country_code, created_at FROM movies
ORDER BY title
LIMIT $1
OFFSET $2
`

type ListMoviesByTitleParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMoviesByTitle(ctx context.Context, arg ListMoviesByTitleParams) ([]Movie, error) {
	rows, err := q.query(ctx, q.listMoviesByTitleStmt, listMoviesByTitle, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DirectorID,
			&i.AdminID,
			&i.ReleaseYear,
			&i.ProductionCountryCode,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :exec
UPDATE movies SET title = $2, director_id = $3, release_year = $4, production_country_code = $5 WHERE id = $1
`

type UpdateMovieParams struct {
	ID                    int32         `json:"id"`
	Title                 string        `json:"title"`
	DirectorID            sql.NullInt32 `json:"directorID"`
	ReleaseYear           time.Time     `json:"releaseYear"`
	ProductionCountryCode int32         `json:"productionCountryCode"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) error {
	_, err := q.exec(ctx, q.updateMovieStmt, updateMovie,
		arg.ID,
		arg.Title,
		arg.DirectorID,
		arg.ReleaseYear,
		arg.ProductionCountryCode,
	)
	return err
}
